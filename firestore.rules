rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 🔧 FONCTIONS UTILITAIRES DE VALIDATION
    
    // Validation du pseudo utilisateur
    function isValidPseudo(pseudo) {
      return pseudo is string 
        && pseudo.size() >= 2 
        && pseudo.size() <= 10
        && pseudo.matches('[a-zA-Z0-9\\s\\-_À-ÿ]+');
    }
    
    // Validation de la bio
    function isValidBio(bio) {
      return bio is string 
        && bio.size() <= 500;
    }
    
    // Validation des jeux
    function isValidGames(games) {
      return games is list 
        && games.size() <= 10;
    }
    
    // Validation du contenu de message
    function isValidMessageContent(content) {
      return content is string 
        && content.size() >= 1 
        && content.size() <= 500;
    }
    

    
    // Vérification si utilisateur est propriétaire
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Vérification si utilisateur est participant à une conversation
    function isParticipant(participants) {
      return request.auth != null && request.auth.uid in participants;
    }
    
    // 👤 COLLECTION UTILISATEURS - RÈGLES STRICTES
    match /users/{userId} {
      // Lecture : tous les utilisateurs connectés peuvent lire les profils
      allow read: if request.auth != null;
      
      // Création : seulement lors de l'inscription avec validation
      allow create: if isOwner(userId) 
        && request.resource.data.keys().hasAll(['uid', 'email', 'pseudo']) 
        && isValidPseudo(request.resource.data.pseudo)
        && request.resource.data.uid == userId
        && request.resource.data.email == request.auth.token.email;
      
      // Mise à jour : propriétaire uniquement avec validation stricte
      allow update: if isOwner(userId) 
        && (!('pseudo' in request.resource.data.diff(resource.data).affectedKeys()) 
           || isValidPseudo(request.resource.data.pseudo))
        && (!('bio' in request.resource.data.diff(resource.data).affectedKeys()) 
           || isValidBio(request.resource.data.bio))
        && (!('games' in request.resource.data.diff(resource.data).affectedKeys()) 
           || isValidGames(request.resource.data.games))
        // Empêcher modification des champs critiques
        && !('uid' in request.resource.data.diff(resource.data).affectedKeys())
        && !('email' in request.resource.data.diff(resource.data).affectedKeys())
        && !('createdAt' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Suppression : propriétaire uniquement (pour suppression de compte)
      allow delete: if isOwner(userId);
    }
    
    // NOUVELLE RÈGLE : Autoriser la lecture de la liste des utilisateurs
    match /users {
      allow list: if request.auth != null;
    }

    // 💬 COLLECTION CONVERSATIONS - SÉCURITÉ RENFORCÉE
    match /conversations/{conversationId} {
      // Lecture : participants peuvent lire
      allow read: if request.auth != null && 
        isParticipant(resource.data.participants);
      
      // Création : utilisateur authentifié peut créer une conversation où il participe
      // avec validation des participants
      allow create: if request.auth != null && 
        isParticipant(request.resource.data.participants) &&
        request.resource.data.participants.size() == 2 &&
        request.resource.data.participants is list;
      
      // Mise à jour : participants peuvent modifier avec restrictions
      allow update: if request.auth != null && 
        isParticipant(resource.data.participants) &&
        // Empêcher modification de la liste des participants
        !('participants' in request.resource.data.diff(resource.data).affectedKeys()) &&
        // Permettre seulement mise à jour de lastMessage, updatedAt, unreadCounts, typing
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(
          ['lastMessage', 'updatedAt', 'unreadCounts', 'typing']
        );
      
      // Suppression : participants peuvent supprimer (incluant suppression lors de blocage)
      allow delete: if request.auth != null && 
        isParticipant(resource.data.participants);
    }

    // 💬 MESSAGES DANS LES CONVERSATIONS - ANTI-SPAM
    match /conversations/{conversationId}/messages/{messageId} {
      // Lecture : participants de la conversation
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      
      // Création : participant avec validation contenu et rate limiting
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
        // Validation du contenu
        isValidMessageContent(request.resource.data.content) &&
        // Vérification expéditeur
        request.resource.data.senderId == request.auth.uid &&
        // Type de message valide
        request.resource.data.type in ['text', 'system', 'game_invite'] &&
        // Timestamp présent
        'timestamp' in request.resource.data;
      
      // Mise à jour : interdite (messages immutables)
      allow update: if false;
      
      // Suppression : seulement l'auteur du message
      allow delete: if request.auth != null &&
        request.auth.uid == resource.data.senderId;
    }

    // 🚫 COLLECTION UTILISATEURS BLOQUÉS - SÉCURITÉ STRICTE
    match /blocked_users/{blockId} {
      // Lecture : seulement le bloqueur peut voir ses bloqués
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.blockerId;
      
      // Création : seulement le bloqueur avec validation
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.blockerId &&
        request.resource.data.keys().hasAll(['blockerId', 'blockedUserId', 'blockedAt']) &&
        request.resource.data.blockerId != request.resource.data.blockedUserId;
      
      // Mise à jour : interdite (blocages immutables)
      allow update: if false;
      
      // Suppression : seulement le bloqueur peut débloquer
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.blockerId;
    }

    // ⚙️ CONFIGURATION APP - LECTURE PUBLIQUE, ÉCRITURE ADMIN SEULEMENT
    match /app_config/{document} {
      allow read: if true; // Lecture publique pour le chargement initial
      allow write: if false; // Seulement via Admin SDK
      
      // 📋 Sous-collections dans app_config (comme games/list)
      match /{subcollection}/{subdocument} {
        allow read: if true; // Lecture publique pour toutes les sous-collections
        allow write: if false; // Seulement via Admin SDK
      }
    }

    // 🎮 COLLECTIONS DE JEUX - LECTURE PUBLIQUE
    match /games/{gameId} {
      allow read: if true; // Lecture publique pour tous les jeux
      allow write: if false; // Seulement via Admin SDK
    }

    match /gameRanks/{rankId} {
      allow read: if true; // Lecture publique pour tous les rangs
      allow write: if false; // Seulement via Admin SDK
    }

    match /gameStyles/{styleId} {
      allow read: if true; // Lecture publique pour tous les styles
      allow write: if false; // Seulement via Admin SDK
    }

    match /timeSlots/{slotId} {
      allow read: if true; // Lecture publique pour tous les créneaux
      allow write: if false; // Seulement via Admin SDK
    }

    // 🔄 COMPTEURS DE MESSAGES NON LUS - ACCÈS RESTREINT
    match /unreadCounts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 📊 STATS ET MÉTADONNÉES UTILISATEUR
    match /userStats/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // 📋 LOGS D'AUDIT - LECTURE SEULEMENT POUR ADMINS, ÉCRITURE VIA ADMIN SDK
    match /audit_logs/{logId} {
      allow read: if false; // Seulement via Admin SDK pour protection
      allow write: if false; // Seulement via Admin SDK
    }

    // 🛡️ RATE LIMITING - COLLECTION POUR TRACKER LES ACTIONS
    match /rate_limits/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 🚨 REPORTS D'ABUS - UTILISATEURS PEUVENT SIGNALER
    match /reports/{reportId} {
      // Création : utilisateur connecté peut signaler
      allow create: if request.auth != null &&
        request.resource.data.reporterId == request.auth.uid &&
        request.resource.data.keys().hasAll(['reporterId', 'reportedUserId', 'reason', 'timestamp']) &&
        request.resource.data.reason in ['spam', 'harassment', 'inappropriate_content', 'fake_profile'];
      
      // Lecture/modification : interdite aux utilisateurs normaux
      allow read, update, delete: if false; // Seulement via Admin SDK
    }

    // La règle "catch-all" a été supprimée. 
    // Par défaut, tout ce qui n'est pas autorisé ci-dessus est refusé.
  }
}